" set tag file no relative path
" In vim 8.0 or above
set notagrelative 
""""""""""""""""""""""""""""""""""""""""""""""""""
""" cscope
""""""""""""""""""""""""""""""""""""""""""""""""""
" auto loading cscope
"!!! in /usr/share/vim/vim74/plugin/cscope_maps.vim
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=0 "use cscope as default tag
    set cst
    " set nocsverb
	" there is a built-in plugin: cscope_map.vim 
	" " add any database in current directory
    " add in cscope_maps.plugins
    if filereadable("cscope.out")
        cs add cscope.out
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
	"
    " show msg when any other cscope db added
    " set cscopeverbose  
	"
    set cscopetag
    set cscopequickfix=s-,g-,c-,d-,t-,e-,f-,i-
endif

" nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
" nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
" nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
" nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
"
" <C-@> : ctrl + space
nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""
""" Universal-ctags
""""""""""""""""""""""""""""""""""""""""""""""""""
" search tags in current dir or ';' means search in parent folder
set tags=./tags;,tags

"
""""""""""""""""""""""""""""""""""""""""""""""""""
""" GTAGS
""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:Gtags_Auto_Map = 1

""""""""""""""""""""""""""""""""""""""""""""""""""
""" GTAGS cscope
""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:GtagsCscope_Auto_Map = 1
" let g:GtagsCscope_Ignore_Case = 1
" let g:GtagsCscope_Keep_Alive = 1
" let g:GtagsCscope_Auto_Load = 1
" let g:GtagsCscope_Auto_Update = 1
" set cscopeprg=gtags-cscope
set cscopetag
" the postfix 'a' means absoulate path
" cs add GTAGS a

" settings of cscope.
" I use GNU global instead cscope because global is faster.
" set cscopequickfix=c-,d-,e-,f-,g0,i-,s-,t-
nmap <silent> <leader>j <ESC>:cstag <c-r><c-w><CR>
nmap <silent> <leader>g <ESC>:lcs f c <c-r><c-w><cr>:lw<cr>
nmap <silent> <leader>s <ESC>:lcs f s <c-r><c-w><cr>:lw<cr>
" command! -nargs=+ -complete=dir FindFiles :call FindFiles(<f-args>)
" au VimEnter * call VimEnterCallback()
" au BufAdd *.[ch] call FindGtags(expand('<afile>'))
" au BufWritePost *.[ch] call UpdateGtags(expand('<afile>'))
"   
" function! FindFiles(pat, ...)
"      let path = ''
"      for str in a:000
"          let path .= str . ','
"      endfor
"   
"      if path == ''
"          let path = &path
"      endif
"   
"      echo 'finding...'
"      redraw
"      call append(line('$'), split(globpath(path, a:pat), '\n'))
"      echo 'finding...done!'
"      redraw
" endfunc
"   
" function! VimEnterCallback()
"      for f in argv()
"          if fnamemodify(f, ':e') != 'c' && fnamemodify(f, ':e') != 'h'
"              continue
"          endif
"   
"          call FindGtags(f)
"      endfor
" endfunc
"   
" function! FindGtags(f)
"      let dir = fnamemodify(a:f, ':p:h')
"      while 1
"          let tmp = dir . '/GTAGS'
"          if filereadable(tmp)
" 			" the postfix 'a' means absoulate path
"              exe 'cs add ' . tmp . ' ' . dir . ' a'
"              break
"          elseif dir == '/'
"              break
" 		 else
" 			 echo PWD
" 			 "exe '!goproj.sh'
"          endif
"   
"          let dir = fnamemodify(dir, ":h")
"      endwhile
" endfunc
"   
" function! UpdateGtags(f)
"      let dir = fnamemodify(a:f, ':p:h')
"      exe 'silent !cd ' . dir . ' && global -ua &> /dev/null &'
" endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""
""" end of GTAGS cscope
""""""""""""""""""""""""""""""""""""""""""""""""""


if has('cscope')
    set cscopetagorder=0
    set cscopetag
    set cscopeverbose
    set cscopequickfix=s-,c-,d-,i-,t-,e-
    set cscopepathcomp=3

    function! LoadCscope()
        let db = findfile("cscope.out", ".;")
        if (!empty(db))
            let path = strpart(db, 0, match(db, "/cscope.out$"))
            set nocscopeverbose " suppress 'duplicate connection' error
			exe "cs kill 0"
            exe "cs add " . db . " " . path
            set cscopeverbose
        endif
    endfunction

    au BufEnter * call LoadCscope()
    au BufWritePost * call LoadCscope()
	nnoremap T :cs find c <C-R>=expand("<cword>")<CR><CR>
    nnoremap t <C-]>
    nnoremap gt <C-W><C-]>
    nnoremap gT <C-W><C-]><C-W>T
    " nnoremap <silent> <leader>z :Dispatch echo "Generating tags and cscope database..." &&
    "                     \ ctags -R --fields=+aimSl --c-kinds=+lpx --c++-kinds=+lpx --exclude=.svn 
    "                     \ --exclude=.git --exclude=*.a --exclude=*.so && find . -iname '*.c' -o 
    "                     \ -iname '*.cpp' -o -iname '*.h' -o -iname '*.hpp' 
    "                     \ > cscope.files && cscope -b -i cscope.files -f cscope.out &&
    "                     \ echo "Done." <cr><cr>
	nnoremap zz <ESC>:!goproj.sh && echo "Done."<CR><CR><ESC>:Cscope<CR><CR>
    cnoreabbrev csa cs add
    cnoreabbrev csf cs find
    cnoreabbrev csk cs kill
    cnoreabbrev csr cs reset
    cnoreabbrev css cs show
    cnoreabbrev csh cs help
    cnoreabbrev csc Cscope
    command! Cscope :call LoadCscope()
endif
